" after restart Neovim (or Vim),
" run `call dein#clear_state() || call dein#update()` to apply changes

" settings before all
function! BeforeAll()

  let g:navim_settings = {}

  " layers
  let g:navim_settings.layers = [
      \ 'c',
      \ 'completion',
      \ 'core',
      \ 'editing',
      \ 'indents',
      \ 'javascript',
      \ 'language',
      \ 'misc',
      \ 'navigation',
      \ 'python',
      \ 'scm',
      \ 'unite']
  "'ruby', 'scala', 'textobj', 'web', 'go'

  " additional plugins
  let g:navim_settings.additional_plugins = [
			\ 'jnurmine/Zenburn',
      \ 'yonchu/accelerated-smooth-scroll',
      \ 'tpope/vim-surround',
      \ 'spf13/vim-autoclose',
      \ 'easymotion/vim-easymotion',
      \ 'scrooloose/nerdcommenter',
      \ 'plytophogy/vim-virtualenv',
      \ 'Shougo/deoplete.nvim',
      \ 'tmhedberg/SimpylFold',
      \ 'Vimjas/vim-python-pep8-indent',
      \ 'zchee/deoplete-jedi']
  "'joshdick/onedark.vim', 'yonchu/accelerated-smooth-scroll', 'edkolev/tmuxline.vim'

  " disabled plugins
  let g:navim_settings.disabled_plugins = [
      \ 'google.vim',
      \ 'junkfile.vim',
      \ 'unite-airline_themes',
      \ 'unite-colorscheme',
      \ 'unite-help',
      \ 'unite-tag']

  " core
  let g:navim_settings.encoding = 'utf-8'
  "let g:navim_settings.encoding = 'gbk'
  "let g:navim_settings.encoding = 'latin1'
  let g:navim_settings.default_indent = 2
  "let g:navim_settings.bin_dir = '/usr/local/bin'
  let g:navim_settings.cscopeprg = 'gtags-cscope'
  "let g:navim_settings.cscopeprg = 'cscope'
  "let g:navim_settings.completion_autoselect = 0
  "let g:navim_settings.completion_plugin = 'deoplete'
  if $WORKON_HOME == ""
    let g:python_host_prog=substitute(system \
    ("which -a python2 | head -n2 | tail -n1"), "\n", '', 'g')
    let g:python3_host_prog=substitute(system \
    ("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
  else
    let g:python_host_prog=expand($WORKON_HOME) . "/nvim-python2/bin/python"
    let g:python3_host_prog=expand($WORKON_HOME) . "/nvim-python3/bin/python"
  endif

  " plugins
  let g:navim_settings.completion_autoselect = 1
  let g:navim_settings.syntaxcheck_autoselect = 1
  let g:navim_settings.explorer_plugin = 'nerdtree'
  "let g:navim_settings.explorer_plugin = 'vimfiler'
  let g:navim_settings.statusline_plugin = 'airline'
  "let g:navim_settings.statusline_plugin = 'lightline'
  let g:autoclose_vim_commentmode = 1
  "let g:deoplete#enable_at_startup = 1
  let g:python_pep8_indent_multiline_string = -2

    " python mode
    autocmd FileType python
      \ let g:pymode_python='python'
      \| let g:pymode_indent = 0

    " SimpylFold
    autocmd FileType python
      \ let g:SimpylFold_docstring_preview = 1

  " user interface
  "let g:navim_settings.colorscheme = 'solarized'
  "let g:navim_settings.colorscheme = 'molokai'
  "let g:navim_settings.colorscheme = 'jellybeans'
  "let g:navim_settings.colorscheme = 'onedark'
  let g:navim_settings.colorscheme = 'zenburn'
  let g:navim_settings.force256 = 1
  let g:navim_settings.termtrans = 0
  let g:navim_settings.max_column = 80
  let g:navim_settings.powerline_fonts = 0
  let g:navim_settings.nerd_fonts = 1

  " 
  " key mapping

    " General
      nmap <LocalLeader>f0 :set foldlevel=0<CR>
      nmap <LocalLeader>f1 :set foldlevel=1<CR>
      nmap <LocalLeader>f2 :set foldlevel=2<CR>
      nmap <LocalLeader>f3 :set foldlevel=3<CR>
      nmap <LocalLeader>f4 :set foldlevel=4<CR>
      nmap <LocalLeader>f5 :set foldlevel=5<CR>
      nmap <LocalLeader>f6 :set foldlevel=6<CR>
      nmap <LocalLeader>f7 :set foldlevel=7<CR>
      nmap <LocalLeader>f8 :set foldlevel=8<CR>
      nmap <LocalLeader>f9 :set foldlevel=9<CR>

    " Python files
      augroup PythonFile
        au!
        autocmd FileType python
          \ nmap <buffer> <LocalLeader>r :PymodeRun<CR>
          \| nnoremap <LocalLeader>y :0,$!yapf --style pep8<CR>
      augroup END

    " EasyMotionsymotion)
      nmap <LocalLeader><LocalLeader> <Plug>(easymotion-prefix)

    " NERD Commenter
      nmap <LocalLeader>c<space> :call NERDComment(0,"toggle")<CR>
      vmap <LocalLeader>c<space> :call NERDComment(0,"toggle")<CR>

endfunction

" settings after all
function! AfterAll()

  " use spaces instead of tabs
  set expandtab
  "set noexpandtab

endfunction


" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0

