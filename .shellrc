# Common rc file for all shells
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export PATH=$HOME/bin:$PATH

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
export TERM=screen-256color
case "$TERM" in
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
    rxvt-unicode) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#if [ -n "$DISPLAY" ]; then
#    export TERM=xterm-256color
#fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Setup ssh-agent
SSH_ENV="$HOME/.ssh/environment"

# SSH key agent
function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     #ps ${SSH_AGENT_PID} doesn't work under cywgin
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
         start_agent;
     }
else
     start_agent;
fi

# Setup virtualenvwrapper
# if [[ -x $(which python3) ]] && [[ ! -x $(which python2) ]]; then
#     export VIRTUALENVWRAPPER_PYTHON=$(which python3)
# fi
#
# if [ -f "/usr/share/virtualenvwrapper/virtualenvwrapper.sh" ]; then
#     source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
# elif [ -f "/usr/bin/virtualenvwrapper.sh" ]; then
#     source /usr/bin/virtualenvwrapper.sh
# elif [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
#     source /usr/local/bin/virtualenvwrapper.sh
# fi

# Set editor to vim
if [[ -x $(which nvim) ]]; then
  export EDITOR=`which nvim`
else
  export EDITOR=`which vim`
fi

# Set vi mode
set -o vi

#pyenv
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
PYENV_ROOT=$(pyenv root)
# PYENV_VIM3=$(pyenv virtualenvs | grep ^" *vim-python3" | sed 's/.*versions\/\(.*\))/\1/')
PY_GIT_LIB=$(find $PYENV_ROOT/versions/vim-python3/ -type d -name site-packages)
export PYENV_ROOT PY_GIT_LIB
# export PYENV_VIRTUALENV_DISABLE_PROMPT=0

# Nodejs
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh"  ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion"  ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f $HOME/.nvm/versions/node/v10.1.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . $HOME/.nvm/versions/node/v10.1.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh

# Perl CPAN
PATH="/home/z/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/z/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/z/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/z/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/z/perl5"; export PERL_MM_OPT;
